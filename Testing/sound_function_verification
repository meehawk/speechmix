>>> import cupy
>>> def a_weight(fs, n_fft, min_db=-80.0):
...     freq = cupy.linspace(0, fs // 2, n_fft // 2 + 1)
...     freq_sq = cupy.power(freq, 2)
...     freq_sq[0] = 1.0
...     weight = 2.0 + 20.0 * (2 * cupy.log10(12194) + 2 * cupy.log10(freq_sq)
...                            - cupy.log10(freq_sq + 12194 ** 2)
...                            - cupy.log10(freq_sq + 20.6 ** 2)
...                            - 0.5 * cupy.log10(freq_sq + 107.7 ** 2)
...                            - 0.5 * cupy.log10(freq_sq + 737.9 ** 2))
...     weight = cupy.maximum(weight, min_db)
...     return weight
... 
>>> def compute_gain(sound, fs, min_db=-80.0, mode='A_weighting'):
...     if fs == 16000:
...         n_fft = 2048
...     elif fs == 44100:
...         n_fft = 4096
...     else:
...         raise Exception('Invalid fs {}'.format(fs))
...     stride = n_fft // 2
...     gain = None
...     print(len(sound))
...     for i in range(0, len(sound[0]) - n_fft + 1, stride):
...         if mode == 'RMSE':
...             g = cupy.mean(sound[i: i + n_fft] ** 2, axis=1)
...         elif mode == 'A_weighting':
...             spec = cupy.fft.rfft(cupy.hanning(n_fft + 1)[:-1] * sound[:,i: i + n_fft])
...             power_spec = cupy.abs(spec) ** 2
...             a_weighted_spec = power_spec * cupy.power(10, a_weight(fs, n_fft) / 10)
...             g = cupy.sum(a_weighted_spec, axis=1)
...         else:
...             raise Exception('Invalid mode {}'.format(mode))
...         if i==0:
...             print("IM HERE")
...             gain = g.reshape([-1,1])
...         else:
...             gain = cupy.concatenate((gain, g.reshape([-1,1])),axis=1)
...     gain = cupy.maximum(gain, cupy.power(10, min_db / 10))
...     gain_db = 10 * cupy.log10(gain)
...     return gain_db
... 
>>> def mix(sound1, sound2, r, fs):
...     gain1 = cupy.max(compute_gain(sound1.data, fs),axis=1)  # Decibel
...     gain2 = cupy.max(compute_gain(sound2.data, fs),axis=1)
...     print(gain1.shape)
...     print(gain2.shape)
...     t = 1.0 / (1 + cupy.power(10, (gain1 - gain2) / 20.) * (1 - r) / r)
...     sound = ((sound1 * t[:,None] + sound2 * (1 - t[:,None])) / cupy.sqrt(t[:,None] ** 2 + (1 - t[:,None]) ** 2))
...     return sound
... 
>>> def mixup_sound(out, target_reweighted,r,fs):
...     indices = [ 1,  0,  3,  2,  5,  4,  7,  6,  9,  8, 11, 10, 13, 12, 15, 14, 17,
...        16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32,
...        35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51,
...        50, 53, 52, 55, 54, 57, 56, 59, 58, 61, 60, 63, 62]
...     sound = mix(out,out[indices],r,fs)
...     target_shuffled_onehot = target_reweighted[indices]
...     target_reweighted.data = target_reweighted.data * r[:,None] + target_shuffled_onehot.data * (1 - r[:,None])
...     return sound, target_reweighted
... 
>>> a = cupy.random.randn((66650))
>>> a
array([-2.23959992, -0.53732863,  0.51459194, ...,  0.15314762,
        1.01231979,  1.18738404])
>>> a = cupy.random.randn((8,66650))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/local/lib/python3.5/dist-packages/cupy/random/sample.py", line 88, in randn
    return distributions.normal(size=size, dtype=dtype)
  File "/usr/local/lib/python3.5/dist-packages/cupy/random/distributions.py", line 501, in normal
    x = rs.normal(0, 1, size, dtype)
  File "/usr/local/lib/python3.5/dist-packages/cupy/random/generator.py", line 414, in normal
    return self._generate_normal(func, size, dtype, loc, scale)
  File "/usr/local/lib/python3.5/dist-packages/cupy/random/generator.py", line 76, in _generate_normal
    if element_size % 2 == 0:
TypeError: unsupported operand type(s) for %: 'tuple' and 'int'
>>> 
KeyboardInterrupt
>>> a = cupy.random.randn(8,66650)
>>> a
array([[-1.44382523, -0.18518131, -2.78676905, ...,  0.79978254,
        -1.30602954, -0.23431585],
       [-2.57807294,  1.18483076,  1.47932664, ...,  0.48119642,
         1.25425197, -1.27674375],
       [ 2.27131457,  1.40363979, -1.20275264, ...,  1.27614273,
         0.61840008, -0.06713802],
       ...,
       [-1.51507658, -1.13503366,  0.95136836, ..., -0.29494994,
        -0.75509678, -1.28565399],
       [ 0.44946379, -0.31018007,  0.38606264, ..., -0.21325665,
        -1.12895836, -0.1761544 ],
       [-1.23406051, -1.55229651,  1.36108636, ...,  0.17196781,
         0.05997497, -0.2076337 ]])
>>> r = cupy.random.rand(bs*2).astype('float32')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'bs' is not defined
>>> r = cupy.random.rand(8).astype('float32')
>>> def mixup_sound(out, target_reweighted,r,fs):
...     
KeyboardInterrupt
>>> 
KeyboardInterrupt
>>> 
KeyboardInterrupt
>>> indices = [1, 0, 3, 2, 5, 4, 7, 6]
>>> def mixup_sound(out, target_reweighted,r,fs):
...     sound = mix(out,out[indices],r,fs)
...     return sound
... 
>>> def mixup_sound(out,r,fs,indices):
...     sound = mix_sound(out,out[indices],r,fs)
...     return sound
... 
>>> sound = mixup_sound(a,r,44100,indices)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in mixup_sound
NameError: name 'mix_sound' is not defined
>>> def mixup_sound(out,r,fs,indices):
...     sound = mix(out,out[indices],r,fs)
...     return sound
... 
>>> sound = mixup_sound(a,r,44100,indices)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in mixup_sound
  File "<stdin>", line 2, in mix
  File "<stdin>", line 10, in compute_gain
TypeError: object of type 'cupy.cuda.memory.MemoryPointer' has no len()
>>> import chainer
>>> a = chainer.Variable(a)
>>> sound = mixup_sound(a,r,44100,indices)
8
IM HERE
8
IM HERE
(8,)
(8,)
>>> sound
variable([[-1.65499366, -0.08514123, -2.65285665, ...,  0.83732808,
           -1.19621586, -0.34058741],
          [-1.79668301, -0.01434223, -2.54735335, ...,  0.86022459,
           -1.11383834, -0.41397436],
          [ 1.17395856,  0.55501711, -1.53596919, ...,  1.09150159,
            0.44422383, -0.0114874 ],
          ...,
          [-1.05715564, -0.59004049,  0.7397915 , ..., -0.73414966,
           -1.28963254, -1.62764303],
          [-0.16956292, -0.99040296,  0.96966946, ..., -0.11006021,
           -0.97440279, -0.2520002 ],
          [-1.16166322, -1.58002758,  1.40088173, ...,  0.14144202,
           -0.09376099, -0.22961483]])
>>> r
array([0.9229148 , 0.1250638 , 0.5784737 , 0.2830686 , 0.37764838,
       0.5849308 , 0.654797  , 0.88119054], dtype=float32)
>>> def a_weight(fs, n_fft, min_db=-80.0):
...     freq = np.linspace(0, fs // 2, n_fft // 2 + 1)
...     freq_sq = np.power(freq, 2)
...     freq_sq[0] = 1.0
...     weight = 2.0 + 20.0 * (2 * np.log10(12194) + 2 * np.log10(freq_sq)
...                            - np.log10(freq_sq + 12194 ** 2)
...                            - np.log10(freq_sq + 20.6 ** 2)
...                            - 0.5 * np.log10(freq_sq + 107.7 ** 2)
...                            - 0.5 * np.log10(freq_sq + 737.9 ** 2))
...     weight = np.maximum(weight, min_db)
...     return weight
... 
>>> def compute_gain(sound, fs, min_db=-80.0, mode='A_weighting'):
...     if fs == 16000:
...         n_fft = 2048
...     elif fs == 44100:
...         n_fft = 4096
...     else:
...         raise Exception('Invalid fs {}'.format(fs))
...     stride = n_fft // 2
...     gain = []
...     for i in range(0, len(sound) - n_fft + 1, stride):
...         if mode == 'RMSE':
...             g = np.mean(sound[i: i + n_fft] ** 2)
...         elif mode == 'A_weighting':
...             spec = np.fft.rfft(np.hanning(n_fft + 1)[:-1] * sound[i: i + n_fft])
...             power_spec = np.abs(spec) ** 2
...             a_weighted_spec = power_spec * np.power(10, a_weight(fs, n_fft) / 10)
...             g = np.sum(a_weighted_spec)
...         else:
...             raise Exception('Invalid mode {}'.format(mode))
...         gain.append(g)
...     gain = np.array(gain)
...     gain = np.maximum(gain, np.power(10, min_db / 10))
...     gain_db = 10 * np.log10(gain)
...     return gain_db
... 
>>> b = a.data
>>> b.asnumpy()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'cupy.core.core.ndarray' object has no attribute 'asnumpy'
>>> from chainer import cuda
>>> b = cuda.to_cpu(a.data)
>>> b
array([[-1.44382523, -0.18518131, -2.78676905, ...,  0.79978254,
        -1.30602954, -0.23431585],
       [-2.57807294,  1.18483076,  1.47932664, ...,  0.48119642,
         1.25425197, -1.27674375],
       [ 2.27131457,  1.40363979, -1.20275264, ...,  1.27614273,
         0.61840008, -0.06713802],
       ...,
       [-1.51507658, -1.13503366,  0.95136836, ..., -0.29494994,
        -0.75509678, -1.28565399],
       [ 0.44946379, -0.31018007,  0.38606264, ..., -0.21325665,
        -1.12895836, -0.1761544 ],
       [-1.23406051, -1.55229651,  1.36108636, ...,  0.17196781,
         0.05997497, -0.2076337 ]])
>>> def mix(sound1, sound2, r, fs):
...      gain1 = np.max(compute_gain(sound1, fs))  # Decibel
...      gain2 = np.max(compute_gain(sound2, fs))
...      t = 1.0 / (1 + np.power(10, (gain1 - gain2) / 20.) * (1 - r) / r)
...      sound = ((sound1 * t + sound2 * (1 - t)) / np.sqrt(t ** 2 + (1 - t) ** 2))
...      return sound
... 
>>> b[0].shape
(66650,)
>>> a
variable([[-1.44382523, -0.18518131, -2.78676905, ...,  0.79978254,
           -1.30602954, -0.23431585],
          [-2.57807294,  1.18483076,  1.47932664, ...,  0.48119642,
            1.25425197, -1.27674375],
          [ 2.27131457,  1.40363979, -1.20275264, ...,  1.27614273,
            0.61840008, -0.06713802],
          ...,
          [-1.51507658, -1.13503366,  0.95136836, ..., -0.29494994,
           -0.75509678, -1.28565399],
          [ 0.44946379, -0.31018007,  0.38606264, ..., -0.21325665,
           -1.12895836, -0.1761544 ],
          [-1.23406051, -1.55229651,  1.36108636, ...,  0.17196781,
            0.05997497, -0.2076337 ]])
>>> b
array([[-1.44382523, -0.18518131, -2.78676905, ...,  0.79978254,
        -1.30602954, -0.23431585],
       [-2.57807294,  1.18483076,  1.47932664, ...,  0.48119642,
         1.25425197, -1.27674375],
       [ 2.27131457,  1.40363979, -1.20275264, ...,  1.27614273,
         0.61840008, -0.06713802],
       ...,
       [-1.51507658, -1.13503366,  0.95136836, ..., -0.29494994,
        -0.75509678, -1.28565399],
       [ 0.44946379, -0.31018007,  0.38606264, ..., -0.21325665,
        -1.12895836, -0.1761544 ],
       [-1.23406051, -1.55229651,  1.36108636, ...,  0.17196781,
         0.05997497, -0.2076337 ]])
>>> sound2 = mix(b[0],b[1],r[0],44100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in mix
NameError: name 'np' is not defined
>>> import numpy as np
>>> sound2 = mix(b[0],b[1],r[0],44100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in mix
  File "cupy/core/core.pyx", line 1318, in cupy.core.core.ndarray.__array_ufunc__
  File "cupy/core/_kernel.pyx", line 906, in cupy.core._kernel.ufunc.__call__
  File "cupy/core/_kernel.pyx", line 90, in cupy.core._kernel._preprocess_args
TypeError: Unsupported type <class 'numpy.ndarray'>
>>> def compute_gain(sound, fs, min_db=-80.0, mode='A_weighting'):
...      if fs == 16000:
...          n_fft = 2048
...      elif fs == 44100:
...          n_fft = 4096
...      else:
...          raise Exception('Invalid fs {}'.format(fs))
...      stride = n_fft // 2
...      gain = []
...      for i in range(0, len(sound) - n_fft + 1, stride):
...          if mode == 'RMSE':
...              g = np.mean(sound[i: i + n_fft] ** 2)
...          elif mode == 'A_weighting':
...              spec = np.fft.rfft(np.hanning(n_fft + 1)[:-1] * sound[i: i + n_fft])
...              power_spec = np.abs(spec) ** 2
...              a_weighted_spec = power_spec * np.power(10, a_weight(fs, n_fft) / 10)
...              g = np.sum(a_weighted_spec)
...          else:
...              raise Exception('Invalid mode {}'.format(mode))
...          gain.append(g)
...      gain = np.array(gain)
...      gain = np.maximum(gain, np.power(10, min_db / 10))
...      gain_db = 10 * np.log10(gain)
...      return gain_db
... 
>>> def a_weight(fs, n_fft, min_db=-80.0):
...      freq = np.linspace(0, fs // 2, n_fft // 2 + 1)
...      freq_sq = np.power(freq, 2)
...      freq_sq[0] = 1.0
...      weight = 2.0 + 20.0 * (2 * np.log10(12194) + 2 * np.log10(freq_sq)
...                             - np.log10(freq_sq + 12194 ** 2)
...                             - np.log10(freq_sq + 20.6 ** 2)
...                             - 0.5 * np.log10(freq_sq + 107.7 ** 2)
...                             - 0.5 * np.log10(freq_sq + 737.9 ** 2))
...      weight = np.maximum(weight, min_db)
...      return weight
... 
>>> sound2 = mix(b[0],b[1],r[0],44100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in mix
  File "cupy/core/core.pyx", line 1318, in cupy.core.core.ndarray.__array_ufunc__
  File "cupy/core/_kernel.pyx", line 906, in cupy.core._kernel.ufunc.__call__
  File "cupy/core/_kernel.pyx", line 90, in cupy.core._kernel._preprocess_args
TypeError: Unsupported type <class 'numpy.ndarray'>
>>> 
KeyboardInterrupt
>>> 
KeyboardInterrupt
>>> 
KeyboardInterrupt
>>> 
KeyboardInterrupt
>>> a
variable([[-1.44382523, -0.18518131, -2.78676905, ...,  0.79978254,
           -1.30602954, -0.23431585],
          [-2.57807294,  1.18483076,  1.47932664, ...,  0.48119642,
            1.25425197, -1.27674375],
          [ 2.27131457,  1.40363979, -1.20275264, ...,  1.27614273,
            0.61840008, -0.06713802],
          ...,
          [-1.51507658, -1.13503366,  0.95136836, ..., -0.29494994,
           -0.75509678, -1.28565399],
          [ 0.44946379, -0.31018007,  0.38606264, ..., -0.21325665,
           -1.12895836, -0.1761544 ],
          [-1.23406051, -1.55229651,  1.36108636, ...,  0.17196781,
            0.05997497, -0.2076337 ]])
>>> b
array([[-1.44382523, -0.18518131, -2.78676905, ...,  0.79978254,
        -1.30602954, -0.23431585],
       [-2.57807294,  1.18483076,  1.47932664, ...,  0.48119642,
         1.25425197, -1.27674375],
       [ 2.27131457,  1.40363979, -1.20275264, ...,  1.27614273,
         0.61840008, -0.06713802],
       ...,
       [-1.51507658, -1.13503366,  0.95136836, ..., -0.29494994,
        -0.75509678, -1.28565399],
       [ 0.44946379, -0.31018007,  0.38606264, ..., -0.21325665,
        -1.12895836, -0.1761544 ],
       [-1.23406051, -1.55229651,  1.36108636, ...,  0.17196781,
         0.05997497, -0.2076337 ]])
>>> sound
variable([[-1.65499366, -0.08514123, -2.65285665, ...,  0.83732808,
           -1.19621586, -0.34058741],
          [-1.79668301, -0.01434223, -2.54735335, ...,  0.86022459,
           -1.11383834, -0.41397436],
          [ 1.17395856,  0.55501711, -1.53596919, ...,  1.09150159,
            0.44422383, -0.0114874 ],
          ...,
          [-1.05715564, -0.59004049,  0.7397915 , ..., -0.73414966,
           -1.28963254, -1.62764303],
          [-0.16956292, -0.99040296,  0.96966946, ..., -0.11006021,
           -0.97440279, -0.2520002 ],
          [-1.16166322, -1.58002758,  1.40088173, ...,  0.14144202,
           -0.09376099, -0.22961483]])
>>> r
array([0.9229148 , 0.1250638 , 0.5784737 , 0.2830686 , 0.37764838,
       0.5849308 , 0.654797  , 0.88119054], dtype=float32)
>>> def a_weight(fs, n_fft, min_db=-80.0):
...      freq = np.linspace(0, fs // 2, n_fft // 2 + 1)
...      freq_sq = np.power(freq, 2)
...      freq_sq[0] = 1.0
...      weight = 2.0 + 20.0 * (2 * np.log10(12194) + 2 * np.log10(freq_sq)
...                             - np.log10(freq_sq + 12194 ** 2)
...                             - np.log10(freq_sq + 20.6 ** 2)
...                             - 0.5 * np.log10(freq_sq + 107.7 ** 2)
...                             - 0.5 * np.log10(freq_sq + 737.9 ** 2))
...      weight = np.maximum(weight, min_db)
...      return weight
... 
>>> def compute_gain(sound, fs, min_db=-80.0, mode='A_weighting'):
...      if fs == 16000:
...          n_fft = 2048
...      elif fs == 44100:
...          n_fft = 4096
...      else:
...          raise Exception('Invalid fs {}'.format(fs))
...      stride = n_fft // 2
...      gain = []
...      for i in range(0, len(sound) - n_fft + 1, stride):
...          if mode == 'RMSE':
...              g = np.mean(sound[i: i + n_fft] ** 2)
...          elif mode == 'A_weighting':
...              spec = np.fft.rfft(np.hanning(n_fft + 1)[:-1] * sound[i: i + n_fft])
...              power_spec = np.abs(spec) ** 2
...              a_weighted_spec = power_spec * np.power(10, a_weight(fs, n_fft) / 10)
...              g = np.sum(a_weighted_spec)
...          else:
...              raise Exception('Invalid mode {}'.format(mode))
...          gain.append(g)
...      gain = np.array(gain)
...      gain = np.maximum(gain, np.power(10, min_db / 10))
...      gain_db = 10 * np.log10(gain)
...      return gain_db
... 
>>> def compute_gain(sound, fs, min_db=-80.0, mode='A_weighting'):
...      if fs == 16000:
...          n_fft = 2048
...      elif fs == 44100:
...          n_fft = 4096
...      else:
...          raise Exception('Invalid fs {}'.format(fs))
...      stride = n_fft // 2
...      gain = []
...      for i in range(0, len(sound) - n_fft + 1, stride):
...          if mode == 'RMSE':
...              g = np.mean(sound[i: i + n_fft] ** 2)
...          elif mode == 'A_weighting':
...              spec = np.fft.rfft(np.hanning(n_fft + 1)[:-1] * sound[i: i + n_fft])
...              power_spec = np.abs(spec) ** 2
...              a_weighted_spec = power_spec * np.power(10, a_weight(fs, n_fft) / 10)
...              g = np.sum(a_weighted_spec)
...          else:
...              raise Exception('Invalid mode {}'.format(mode))
...          gain.append(g)
...      gain = np.array(gain)
...      gain = np.maximum(gain, np.power(10, min_db / 10))
...      gain_db = 10 * np.log10(gain)
...      return gain_db
... 
>>> def mix(sound1, sound2, r, fs):
...      gain1 = np.max(compute_gain(sound1, fs))  # Decibel
...      gain2 = np.max(compute_gain(sound2, fs))
...      t = 1.0 / (1 + np.power(10, (gain1 - gain2) / 20.) * (1 - r) / r)
...      sound = ((sound1 * t + sound2 * (1 - t)) / np.sqrt(t ** 2 + (1 - t) ** 2))
...      return sound
... 
>>> sound2 = mix(b[0],b[1],r[0], 44100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in mix
  File "cupy/core/core.pyx", line 1318, in cupy.core.core.ndarray.__array_ufunc__
  File "cupy/core/_kernel.pyx", line 906, in cupy.core._kernel.ufunc.__call__
  File "cupy/core/_kernel.pyx", line 90, in cupy.core._kernel._preprocess_args
TypeError: Unsupported type <class 'numpy.ndarray'>
>>> b
array([[-1.44382523, -0.18518131, -2.78676905, ...,  0.79978254,
        -1.30602954, -0.23431585],
       [-2.57807294,  1.18483076,  1.47932664, ...,  0.48119642,
         1.25425197, -1.27674375],
       [ 2.27131457,  1.40363979, -1.20275264, ...,  1.27614273,
         0.61840008, -0.06713802],
       ...,
       [-1.51507658, -1.13503366,  0.95136836, ..., -0.29494994,
        -0.75509678, -1.28565399],
       [ 0.44946379, -0.31018007,  0.38606264, ..., -0.21325665,
        -1.12895836, -0.1761544 ],
       [-1.23406051, -1.55229651,  1.36108636, ...,  0.17196781,
         0.05997497, -0.2076337 ]])
>>> b.asnumpy()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.ndarray' object has no attribute 'asnumpy'
>>> r
array([0.9229148 , 0.1250638 , 0.5784737 , 0.2830686 , 0.37764838,
       0.5849308 , 0.654797  , 0.88119054], dtype=float32)
>>> r.asnumpy()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'cupy.core.core.ndarray' object has no attribute 'asnumpy'
>>> r = cuda.to_cpu(r)
>>> r
array([0.9229148 , 0.1250638 , 0.5784737 , 0.2830686 , 0.37764838,
       0.5849308 , 0.654797  , 0.88119054], dtype=float32)
>>> sound2 = mix(b[0],b[1],r[0], 44100)
>>> sound2
array([-1.65499366, -0.08514123, -2.65285665, ...,  0.83732808,
       -1.19621586, -0.34058741])
>>> sound
variable([[-1.65499366, -0.08514123, -2.65285665, ...,  0.83732808,
           -1.19621586, -0.34058741],
          [-1.79668301, -0.01434223, -2.54735335, ...,  0.86022459,
           -1.11383834, -0.41397436],
          [ 1.17395856,  0.55501711, -1.53596919, ...,  1.09150159,
            0.44422383, -0.0114874 ],
          ...,
          [-1.05715564, -0.59004049,  0.7397915 , ..., -0.73414966,
           -1.28963254, -1.62764303],
          [-0.16956292, -0.99040296,  0.96966946, ..., -0.11006021,
           -0.97440279, -0.2520002 ],
          [-1.16166322, -1.58002758,  1.40088173, ...,  0.14144202,
           -0.09376099, -0.22961483]])
>>> sound2 = mix(b[1],b[0],r[0], 44100)
>>> sound2
array([-2.68850997,  1.16548898,  1.24411531, ...,  0.54560601,
        1.14210289, -1.29173396])
>>> sound2 = mix(b[1],b[0],r[1], 44100)
>>> sound2
array([-1.79668303, -0.01434223, -2.54735334, ...,  0.86022459,
       -1.11383833, -0.41397436])

